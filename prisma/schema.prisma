generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String?   @unique
  emailVerified           DateTime?
  image                    String?
  password                 String?
  phone                    String?
  bio                      String?
  profession               String?
  telegram_id             String?   @unique
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  resetToken              String?
  resetTokenExpiry        DateTime?
  plan                     String    @default("free")
  telegramRemindersEnabled Boolean   @default(true)
  reminderTimeHours        Int       @default(2)
  holidays                 String[]
  refCode                 String?   @unique
  role                     String    @default("trainer")
  isClient                Boolean   @default(false)

  // Relations
  accounts                 Account[]
  sessions                 Session[]
  clients                  Client[]
  subscriptions           Subscription[]
  appointments            Appointment[]
  cancelledAppointments    Appointment[] @relation("CancelledByUser")
  businessSettings        BusinessSettings?
  notificationSettings    NotificationSettings?

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id                       String        @id @default(cuid())
  userId                   String        @map("user_id")
  name                     String
  phone                    String
  notes                    String?
  createdAt                DateTime      @default(now()) @map("created_at")
  updatedAt                DateTime      @updatedAt @map("updated_at")
  email                    String        @unique
  status                   String        @default("active")
  telegramId               String?       @unique @map("telegram_id")
  telegramUsername         String?       @map("telegram_username")
  reminderTimeHours        Int           @default(2) @map("reminder_time_hours")
  telegramRemindersEnabled Boolean       @default(true) @map("telegram_reminders_enabled")
  password                 String
  user                     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments                 Payment[]
  appointments             Appointment[]

  @@map("client")
}

model Appointment {
  id                 String      @id @default(cuid())
  date               DateTime
  duration           Int         @default(30)
  notes              String?
  status             String      @default("scheduled")
  userId             String      @map("user_id")
  clientId           String      @map("client_id")
  cancelledById      String?     @map("cancelled_by_id")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  cancellationReason String?     @map("cancellation_reason")
  cancelledAt        DateTime?   @map("cancelled_at")
  attendance         Attendance?
  payments           Payment[]
  reminders          Reminder[]
  client             Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cancelledBy        User?       @relation("CancelledByUser", fields: [cancelledById], references: [id])

  @@map("appointment")
}

model Payment {
  id            String       @id @default(cuid())
  appointmentId String?
  amount        Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        String       @default("pending")
  clientId      String
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  client        Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String
  plan      Plan      @default(free)
  isActive  Boolean   @default(true)
  startedAt DateTime  @default(now())
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reminder {
  id            String       @id @default(cuid())
  appointmentId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        String       @default("pending")
  type          String
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id             String   @id @default(cuid())
  userId         String   @unique
  emailEnabled   Boolean  @default(true)
  browserEnabled Boolean  @default(true)
  reminderTime   String   @default("30")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model BusinessSettings {
  id           String     @id @default(cuid())
  userId       String     @unique
  timezone     String
  workingHours Json
  slotDuration Int
  holidays     DateTime[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_settings")
}

model Attendance {
  id            String       @id @default(cuid())
  status        String
  appointmentId String?      @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointment   Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum Plan {
  free
  pro
}

enum ReminderType {
  email
  telegram
}
